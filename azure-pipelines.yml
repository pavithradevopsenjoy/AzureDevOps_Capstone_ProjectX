trigger:
- main

variables:
  azureServiceConnectionId: '4ef73aef-4d78-4ef3-b146-7d7ccb52d007'
  stagingWebAppName: 'flask-appservice-2024032401'
  productionWebAppName: 'flask-appservice-prod-2024032401'
  vmImageName: 'ubuntu-latest'
  stagingEnvironmentName: 'flask-staging-env'
  productionEnvironmentName: 'flask-prod-env'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.10'

stages:
- stage: BuildAndTest
  displayName: Build and Test
  jobs:
  - job: BuildTestJob
    pool:
      name: self-hosted-agent
    steps:
    - task: UsePythonVersion@0
      inputs:
        version: '3.10'
        architecture: 'x64'

    - script: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        make install
        make lint
      workingDirectory: $(projectRoot)
      displayName: "Build and Lint"

    - script: |
        source .venv/bin/activate
        pytest tests/ --junitxml=test-results/results.xml
      workingDirectory: $(projectRoot)
      displayName: "Run Unit Tests"

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-results/results.xml'
        testRunTitle: 'Python Unit Tests'

    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Publish Artifact'
      artifact: drop

- stage: DeployStaging
  displayName: Deploy to Staging
  dependsOn: BuildAndTest
  condition: succeeded()
  jobs:
  - deployment: StagingDeploy
    environment: $(stagingEnvironmentName)
    pool:
      name: self-hosted-agent
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Staging Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(stagingWebAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              deploymentMethod: zipDeploy

- stage: DeployProduction
  displayName: Deploy to Production
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
  - deployment: ProdDeploy
    environment: $(productionEnvironmentName)  # Approval must be set in DevOps > Environments
    pool:
      name: self-hosted-agent
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Production Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(productionWebAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              deploymentMethod: zipDeploy
